#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 80

&mt {
    quick-tap-ms = <0>;
    retro-tap;
};

&lt {
    flavor = "hold-preferred";
    retro-tap;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        Alt+Space {
            bindings = <&kp LA(SPACE)>;
            key-positions = <13 12>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&kp>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q       &kp W             &kp E         &kp R           &kp T                                                           &kp Y        &kp U  &kp I      &kp O    &kp SINGLE_QUOTE
&kp A       &kp S             &kp D         &kp F           &kp G             &kp LS(LG(S))                &kp SEMICOLON    &kp H        &kp J  &kp K      &kp L    &kp P
&kp Z       &kp X             &kp C         &kp V           &kp B             &kp TAB                      &kp SPACE        &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp ESCAPE  &kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_SHIFT  &lt 2 LANGUAGE_2  &mt LEFT_GUI LANGUAGE_1      &lt 3 BACKSPACE  &lt 1 ENTER                             &kp RIGHT_COMMAND
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        arrow {
            bindings = <
&kp MINUS        &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PLUS                                &kp PIPE         &kp AMPERSAND   &mkp MCLK       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp SLASH        &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp ASTERISK  &trans         &kp MINUS  &kp EXCLAMATION  &mkp LCLK       &kp UP_ARROW    &mkp RCLK             &kp PERCENT
&kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD    &kp EQUAL      &kp AT     &kp QMARK        &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW       &kp BACKSLASH
&trans           &trans           &trans           &trans           &trans        &trans         &trans     &trans                                                                 &kp UNDER
            >;
        };

        FUNCTION {
            bindings = <
&kp MINUS        &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp PLUS                              &kp F1   &kp F2   &kp F3   &kp F4      &kp F5
&kp SLASH        &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp ASTRK   &trans         &kp MINUS  &kp F6   &kp F7   &kp F8   &kp F9      &kp F10
&kp KP_NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD  &kp EQUAL      &kp PIPE   &kp F11  &kp F12  &kp F13  &kp ESCAPE  &studio_unlock
&trans           &trans        &trans        &trans        &trans      &trans         &trans     &trans                                 &trans
            >;
        };

        adobe {
            bindings = <
&trans         &trans         &trans         &trans  &trans                                           &kp K_VOLUME_UP    &trans  &trans          &kp LG(LS(LEFT_BRACKET))   &kp LG(LEFT_BRACKET)
&trans         &kp LG(LS(S))  &trans         &trans  &kp LG(LS(G))  &trans      &kp LG(LS(NUMBER_4))  &kp K_VOLUME_DOWN  &trans  &msc SCRL_UP    &kp LG(LS(RIGHT_BRACKET))  &kp LG(RIGHT_BRACKET)
&kp LG(LS(Z))  &trans         &kp LG(LS(C))  &trans  &trans         &trans      &trans                &kp K_MUTE         &trans  &msc SCRL_DOWN  &trans                     &trans
&trans         &trans         &trans         &trans  &trans         &trans      &trans                &trans                                                                &trans
            >;
        };
    };
};
